import Fuse from 'fuse.js';
import { Nutrients } from '../screens/SettingsMacros';
import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';

const USDA_API_KEY = '8t8MfPzP1u4o2spbV2e7v9kFa6bN4t9qk4wefk1i';
const USDA_API_URL = 'https://api.nal.usda.gov/fdc/v1/foods/list';

const useAddFood = async (foodDaysCollectionRef: any, {date}: any, {nutrients}: any) => {

    // check if a document with the selected date exists inside foodDaysCollectionRef
    const foodDayDocRef = doc(foodDaysCollectionRef, `${date.day}-${date.month}-${date.year}`);
    const foodDayDocSnapshot = await getDoc(foodDayDocRef);

    if (foodDayDocSnapshot.exists()) {

        const foodDayData = foodDayDocSnapshot.data();
        const currentNutrients = foodDayData?.nutrients || {};

        // Add the new food data to the current nutrients
        const updatedNutrients = {
            calories: (currentNutrients.calories || 0) + (nutrients.calories || 0),
            protein: (currentNutrients.protein || 0) + (nutrients.protein || 0),
            carbs: (currentNutrients.carbs || 0) + (nutrients.carbs || 0),
            fat: (currentNutrients.fat || 0) + (nutrients.fat || 0),
        };

        // Update the existing document with the updated nutrients
        await updateDoc(foodDayDocRef, {
            nutrients: updatedNutrients,
        });

    } else {

        // Create a new document with the selected date as the title
        await setDoc(foodDayDocRef, {
            title: `${date.day}-${date.month}-${date.year}`,
            nutrients,
        });
    }
}

const getFoodNutrients = async (searchQuery: string, grams: string) => {
    try {
        const response = await fetch(`${USDA_API_URL}?api_key=${USDA_API_KEY}&query=${searchQuery}`);
        const data = await response.json();

        // Map over the data to extract the properties you're interested in
        const formattedData = data.map((item: any) => {

            // Log the names of all the nutrients
            //console.log(item.foodNutrients.map((nutrient: any) => nutrient.name));

            const nutrients = item.foodNutrients.reduce((acc: any, nutrient: any) => {
                if (nutrient.name === 'Energy') {
                    acc.calories = nutrient.amount;
                } else if (nutrient.name === 'Protein') {
                    acc.protein = nutrient.amount;
                } else if (nutrient.name === 'Carbohydrate, by difference') {
                    acc.carbs = nutrient.amount;
                } else if (nutrient.name === 'Total lipid (fat)') {
                    acc.fat = nutrient.amount;
                }
                return acc;
            }, {});

            return {
                brandOwner: item.brandOwner,
                description: item.description,
                nutrients
            };
        });

        // Use Fuse.js to search the formatted data
        const options = {
            includeScore: true,
            keys: ['description'],
            threshold: 0.2,
            minMatchCharLength: 3,
        };

        const fuse = new Fuse(formattedData, options);
        const result = fuse.search('apple');
        const apple = result[0].item as { nutrients: Nutrients };
        const nutrientsPer100g = apple.nutrients;

        const inputedGrams = Number(grams);

        const nutrients = {
            calories: typeof nutrientsPer100g.calories === 'number' ? nutrientsPer100g.calories * inputedGrams / 100 : undefined,
            protein: typeof nutrientsPer100g.protein === 'number' ? nutrientsPer100g.protein * inputedGrams / 100 : undefined,
            carbs: typeof nutrientsPer100g.carbs === 'number' ? nutrientsPer100g.carbs * inputedGrams / 100 : undefined,
            fat: typeof nutrientsPer100g.fat === 'number' ? nutrientsPer100g.fat * inputedGrams / 100 : undefined,
        };

        // Log the first result, which is the closest match
        //console.log(result[0]);\

        // log the nutrients
        //console.log(nutrients);

        
        

        return nutrients;

    } catch (error) {
        console.error(error);
    }
}

export default useAddFood
export { getFoodNutrients };
